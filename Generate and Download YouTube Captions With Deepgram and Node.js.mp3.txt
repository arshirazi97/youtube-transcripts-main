Hello there. My name is Kevin Lewis, and I'm a developer ad here at Deepgram. And today, I'm gonna show you how to get a transcript from a Youtube video using Deepgram speech recognition Api. This project has three parts. In the first part, we'll be downloading a Youtube video to a local P three file. In the second part, we'll take that m mp three file and send it to Deepgram to get a nice and accurate transcript. And then finally, we'll take that transcript and store it in a text file on our computer. I've just gone ahead and installed the dependencies we're gonna to use today and required them in this index Js file. So we're using the file system built in library. We have this package called Youtube P three download, which surprise surprise we'll download a Youtube video. We have the Deepgram node Js s sdk. And finally, we have F mp static. F peg is an audio processing and manipulation utility, an F peg static makes the executable available inside of our project. So let's crack on. We're ready to go. The first thing we're gonna do is download a Youtube video. So we've required Youtube p three download, now we're gonna go ahead and initialize it. And we initialize it with a few settings, a link directly to our executable. Specifying that we want the Mp three file to be put alongside the index Js file. And finally, specifying that we want to prioritize the highest audio quality possible. Then to download it, we can just go ahead and provide a Youtube video Id. This is of a movie trailer. So this is all we need to download a Youtube video. There is something else we need to do here though. We need to know when it's finished. Because we don't wanna send it to Deepgram until we have the completed file. Fortunately, this Youtube p three download a package emits an event when the download has been completed. So we can listen for that event, finished. And what is returned once it is downloaded, is a object in this video parameter here, which contains some metadata about the file. We really only care about the video file name. Because we'll need that later. What we'll do here is just console log, the video file name, has been downloaded. So we'll run this and we'll just check that that successfully downloads. Send me a short video, so it just took a moment there. But that is our m p three file downloaded it. Now in the next step, we wanna take this file and provide it to Deepgram. So the first thing we wanna do is take this required node Js S sdk and initialize it. And we'll initialize it with our Api key. Which I have stored here in an environment variable. Then we're ready to ask for a pre recorded transcription. We need to provide the file name here, which we stored video file name. You can provide any features here that you want. We have a whole list of features in our documentation. I'm gonna use pun eight and I'm also going to use utterances, which will return which will return phrases as well as words. Then we're gonna go ahead here and console log the result. And I'm just gonna use our captions generator here two web V to make it a little easier to see inside of the terminal. So that is now red downloading the M p three file going off to Deepgram, coming back and there is our brand new transcription. So the final step is to save this text right here in our terminal to a text file. So we won't console log it. Instead, we're gonna go ahead and save it. All we need to do here is use the file system module, write file sync. The first thing we need to provide is the file name and the file name is going to be video file name. And then we'll just add to the end of that dot t x t. And we also want to provide the text So we'll just do to web V again. We'll run this one final time, and it's gonna go grab a brand new m p three for us. Go off to Deepgram and then provide our captions right here in this file. I hope you found that interesting, and if you have any questions at all, Please feel free to reach out to us. We love answering questions and helping you build great projects with voice. Bye for now.